<---------------------------------Variables globales--------------------------------------------------->
frame_main : frame%
    Desc: Ventana principal del juego.

pane_main : vertical-pane%
    Desc: Contiene el panel del dealer y el panel de los jugadores.

pane_dealer: horizontal-pane%
    Desc: Contiene el canvas de las cartas del dealer y el canvas para el deck.

canvas_dealer_cards : canvas%
    Desc: Contiene las cartas del dealer.

canvas_deck : canvas%
    Desc: Contiene una imagen que simula un deck.

pane_players : horizontal-pane%
    Desc: Contiene una panel con sus componentes respectivos para cada jugador

list_players : list (nombre, status('stay, 'playing, 'turn'), cartas, elementos_gráficos(canvas, hit, stay))
    Desc: Contiene a los jugadores y sus cartas respectivas.

list_deck : list (nombre, bitmap%, valor, init_X, init_Y)
    Desc: Contiene las cartas que se usarán durante la partida.

dialog_puntuation_table : dialog%
    Desc: Muestra las puntuaciones de los jugadores al finalizar una partida, también permite reiniciar el juego.

<---------------------------------GUI--------------------------------------------------->
(create_players names)
    recibe: Nombres de jugadores
    Retorna: N/A
    Desc: Construye los canvas y páneles necesarios para los jugadores, luego los añade al pane_players, además añade a la list_players los objetos de los botones hit y stay.

(hit_event button_event)
    recibe: Evento del botón hit de un jugador.
    retorna: N/A
    Desc: Ejecuta la función engine/deal y draw_player_cards, esta función se debe definir dentro del parámetro callback del botón hit correspondiente a cada jugador.

(stay_event button_event)
    recibe: Evento del botón stay de un jugador.
    retorna: N/A
    Desc: Ejecuta la función engine/stay, esta función se debe definir dentro del parámetro callback del botón stay correspondiente a cada jugador.

(draw_player_cards draw_context cards)
    recibe: Objeto dc% (draw_context) para dibujar las cartas del jugador respectivo (cards)
    retorna: N/A
    Desc: Dibuja las cartas y las dibuja para que se vean solapadas,debe definirse dentro del parámetro callback de los botones de cada jugador (stay, hit).

(draw_dealer_cards draw_context cards)
    recibe: Objeto dc% (draw_context) para dibujar las cartas del dealer (cards)
    retorna: N/A
    Desc: Dibuja las cartas una al lado de otra, debe llamarse al momento de que al dealer se le otorgan las cartas que requiere y al inicio cuando se le dan las primeras dos cartas.

(draw_deck draw_context)
    recibe: Objeto dc% (draw_context) para dibujar el deck.
    retorna: N/A
    Desc: Dibuja el deck, aunque dependiendo de lo que se coloque de background puede ser innecesario un espacio para el deck.

(reset_game)
    recibe: N/A
    retorna: N/A
    Desc: reinicia los canvas de todos los jugadores y vuelve a repartir las cartas.

(puntuation_table)
    recibe: N/A
    retorna: N/A
    Desc: Finaliza la partida y muestra una ventana con las puntuaciones de los jugadores.

(check_player_buttons players)
    recibe: lista de jugadores
    retorna: N/A
    Desc: Revisa a los jugadores que están en status playing y activa los botones del que tiene el status turn.

(turn name players)
    recibe: lista de jugadores
    retorna: lista de jugadores actualizda.
    Desc: activa el status turn para el jugador indicado.

<---------------------------------ENGINE--------------------------------------------------->
  
(bCEj name_list)
	recibe: una lista con los nombres de cada jugador de la partida
	retorna:
	descripción: inicia la gui

(deal name players deck)
	recibe: el nombre del jugador al que se le va a reparitr
	retorna: players actualizada https://www.lucidchart.com/documents#docs?folder_id=home&browser=icon&sort=saved-desc
	descripción: retorna la la lista players actualizada, es decir, con una carta más al jugador que se puso en el argumento

(init name_list deck)
	recibe: lista de nombres de jugadores
	retorna: lista players
	descripción: construye la lista players y llama la función para hacer la primera repartida

(deal_init name_list players deck)
	recibe: la lista players
	retorna: lista players actualizada
	descripción: hace recursion de cola con la lista de nombres para construir la lista players

(blackjack? players)
	recibe: la lista players
	retorna: verdadero si alguien tiene blackjack o falso si no
	descripción: despues de hacer un deal, se ejecuta esta función para ver si alguien obtuvo blackjack

(bust? players)
	recibe: lista players
	retorna: verdadero si alguien tiene un bust o falso si no
	descripción: despues de hacer un deal, se ejecuta esta función para ver si alguien obtuvo un bust

(endgame players)
	recibe: la lista players
	retorna: lista de pares (jugador puntaje) y lista de nombres de los ganadores
	descripción: suma los puntos de cada jugador y genera la lista de jugador puntaje, ordena la lista de jugadores por puntaje en orden blackjack, añade a otra lista (lista de nombres de ganadores) el nombre del jugador que esté arriba de la lista, revisa si el siguiente jugador tiene una puntuación igual a la del primer lugar, si sí, lo añade también y sigue asi para siempre, si no, para de llenar la lista de ganadores.

(stay name players)
	recibe: el nombre de un jugador y la lista players
	retorna: lista de players actualizada
	descripción: le aplica stay al status del jugador que se le pasó como argumento.

(all_players_stayed? players)
	recibe: la lista players
	retorna: verdadero si todos los jugadores excepto el dealer están plantados, falso si no
	descripción: siempre que alguien se planta, revisa si todos los jugadores excepto el dealer estan plantados

(check_dealer players)
	recibe: la lista players
	retorna: una llamada a endgame
	descripción: si el dealer tiene menos o igual a 16, pide cartas. si tiene mas de 16, se planta. se llama endgame.

(get_player name players)
    recibe: la lista players
    retorna: la lista con los datos del jugador
    descripción: busca el jugador según el parámetro name y retorna su lista de atributos correspondiente.

INFO: podría ser que 'pick-random' haga que todo lo de el deck random tenga que ir a la GUI, para evitar shit del profe, pero es súmamente eficiente ya que es O(1), en cambio, 'pick-item' es, aproximandamente, O(n^2). En cualquier caso, 'mix_list' usa let y no encontré una forma para que no fuera así.


(define (pick-item l)
  (list-ref l (random (length l))))

(define (pick-random xs)
  (pick-random/helper (rest xs) (first xs) 1))

(define (pick-random/helper xs chosen k)
  (cond
    [(empty? xs) chosen]
    [else  ; with probability 1/(k+1) choose the first element of xs
     (if (= (random (+ k 1)) 0)
         (pick-random/helper (rest xs) (first xs) (+ k 1))
         (pick-random/helper (rest xs) chosen     (+ k 1)))]))

(define (mix_list lista)
  (cond ((empty? lista)
         (list))
        (else
         (let ([card (pick-random lista)])
           (append (list card)
                   (mix_list (remove card lista)))))))
