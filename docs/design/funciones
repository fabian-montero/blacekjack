; estructuras de datos
lista: deck
lista: players
	| nombre, status, cartas


; funciones
(bCEj name_list)
	recibe: una lista con los nombres de cada jugador de la partida
	retorna: 
	descripción: inicia la gui

(deal name players deck)
	recibe: el nombre del jugador al que se le va a reparitr
	retorna: players actualizada
	descripción: retorna la la lista players actualizada, es decir, con una carta más al jugador que se puso en el argumento

(init name_list deck)
	recibe: lista de nombres de jugadores
	retorna: lista players
	descripción: construye la lista players y llama la función para hacer la primera repartida

(deal_init name_list players deck)
	recibe: la lista players
	retorna: lista players actualizada
	descripción: hace recursion de cola con la lista de nombres para construir la lista players 
	
(blackjack? players)
	recibe: la lista players
	retorna: verdadero si alguien tiene blackjack o falso si no
	descripción: despues de hacer un deal, se ejecuta esta función para ver si alguien obtuvo blackjack

(bust? players)
	recibe: lista players
	retorna: verdadero si alguien tiene un bust o falso si no
	descripción: despues de hacer un deal, se ejecuta esta función para ver si alguien obtuvo un bust

(endgame players)
	recibe: la lista players
	retorna: lista de pares (jugador puntaje) y lista de nombres de los ganadores
	descripción: suma los puntos de cada jugador y genera la lista de jugador puntaje, ordena la lista de jugadores por puntaje en orden blackjack, añade a otra lista (lista de nombres de ganadores) el nombre del jugador que esté arriba de la lista, revisa si el siguiente jugador tiene una puntuación igual a la del primer lugar, si sí, lo añade también y sigue asi para siempre, si no, para de llenar la lista de ganadores.

(stay name players)
	recibe: el nombre de un jugador y la lista players
	retorna: lista de players actualizada
	descripción: le aplica stay al status del jugador que se le pasó como argumento

(all_players_stayed? players)
	recibe: la lista players
	retorna: verdadero si todos los jugadores excepto el dealer están plantados, falso si no
	descripción: siempre que alguien se planta, revisa si todos los jugadores excepto el dealer estan plantados

(check_dealer players)
	recibe: la lista players
	retorna: una llamada a endgame
	descripción: si el dealer tiene menos o igual a 16, pide cartas. si tiene mas de 16, se planta. se llama endgame.

(get_player name players)
    recibe: la lista players
    retorna: la lista con los datos del jugador
    descripción: busca el jugador según el parámetro name y retorna su lista de atributos correspondiente.
    
INFO: podría ser que 'pick-random' haga que todo lo de el deck random tenga que ir a la GUI, para evitar shit del profe, pero es súmamente eficiente ya que es O(1), en cambio, 'pick-item' es, aproximandamente, O(n^2). En cualquier caso, 'mix_list' usa let y no encontré una forma para que no fuera así.
    
    
(define (pick-item l)
  (list-ref l (random (length l))))
  
(define (pick-random xs)
  (pick-random/helper (rest xs) (first xs) 1))

(define (pick-random/helper xs chosen k)
  (cond
    [(empty? xs) chosen]
    [else  ; with probability 1/(k+1) choose the first element of xs
     (if (= (random (+ k 1)) 0)
         (pick-random/helper (rest xs) (first xs) (+ k 1))
         (pick-random/helper (rest xs) chosen     (+ k 1)))]))

(define (mix_list lista)
  (cond ((empty? lista)
         (list))
        (else
         (let ([card (pick-random lista)])
           (append (list card)
                   (mix_list (remove card lista)))))))
